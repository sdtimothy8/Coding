"""
Django settings for ksmp project.

Generated by 'django-admin startproject' using Django 1.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import commands
import uuid
from string import strip
from ksmp import tz

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '1ys4u070ub@g3j89ztlgvr(7=9g*o96!3km3*@22&*aup73bj0'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'django_nose',
    # 'mod_wsgi.server',
    'rest_framework',

    # The modules for KSMP. Please append one by one.
    'diskmgr',
    'firewall',
    'resources',
    'tcp',
    'precmd',
    'host',
    'load',
    'users',
    'times',
    'packages',
    'index',
    'login',
    'session',
    'network',
    'driverlist',
    'fans',
    'nfs',
    'ftp',
    'logmanager',
    'sysmonitor',
    'vmmanager',
    # 'agent',
    'faultmanager',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    # 'django.contrib.auth.middleware.AuthenticationMiddleware',
    # 'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    # 'session.SessionAuthticateMiddleWare.SessionAuthticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'ksmp.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ksmp.wsgi.application'

TEST_RUNNER = 'django_nose.NoseTestSuiteRunner'
SESSION_ENGINE = 'session.ksmp_session'
SESSION_COOKIE_NAME = 'WWW-Authenticate'
SESSION_COOKIE_AGE = 60*5
SESSION_COOKIE_DOMAIN = None
SESSION_SAVE_EVERY_REQUEST = False
PERMISSION_PREFIX = '1234567890abcdefghijklmnopqrstuvwxyz'
PERMISSION_KEY = 'f3qr35xa58ijw2q4'
FONT_TYPE_FILE = '/var/www/html/ksmp/login/DejaVuSans.ttf'
COOKIE_VALIDATECODEAGE = None
PACKAGE_DIR = '/home'
LOCKEDAGE = 60*5
TRY_TIMES = 5
USERLOCKED_NAME = 'userlocked'
REQUEST_TOKEN_NAME = 'HTTP_WWW_AUTHENTICATE'
TOKEN_NAME = 'WWW-Authenticate'

MAILFROM = "unicorn@inspur.service"

# production settings start
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
CSRF_COOKIE_HTTPONLY = True
X_FRAME_OPTIONS = 'DENY'
# production settings end

# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join('/usr/lib/fms/db/faults.db')
    },
    'faultmanagement': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join('/usr/lib/fms/db/faults.db')
    },
    'faultsetting': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join('/usr/lib/fms/db/configure.db')
    }
}
DATABASE_ROUTERS = ['ksmp.database_router.DatabaseAppsRouter']
DATABASE_APPS_MAPPING = {
    'faultmanager': 'faultmanagement'
}
# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

BROKER_PORT = '5672'
BROKER_USER = 'asdf'
BROKER_PASSWORD = '123456'
RABBITMQ_EXCHANGE = 'exchangeTest'
RABBITMQ_ROUTEKEY = 'queueTestKey'

EMAIL_BACKEND = 'msgsender.mailbackend.UnicornEmailBackend'

LANGUAGE_CODE = 'en-us'

TIME_ZONE = tz.getSystemTimeZone()
# TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

LOG_ROOT_PATH = "/var/log/"

UNICORN_LOG_NAME = 'unicorn.log'

KERNEL_LOG_NAME = 'kern.log'

FILETRANS_ROOT_PATH = "/home/filetrans/"

DEFAULT_CHARSET = "UTF-8"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static/'),
)


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'), ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


# reset db.sqlite3
# DB_PATH = '/var/www/html/ksmp/db.sqlite3'
# tz.cleanSessionTable()

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'standard': {
            'format': '%(asctime)s [%(levelname)s] [%(threadName)s:%(thread)d] [%(name)s:%(lineno)d] - %(message)s'
        },
    },
    'filters': {
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
        },
        'default': {
            'level': 'WARNING',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_ROOT_PATH, UNICORN_LOG_NAME),
            'maxBytes': 1024*1024*2,  # 2 MB
            'backupCount': 5,
            'formatter': 'standard',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'standard'
        },
    },
    'loggers': {
        'django': {
            'handlers': ['default', 'console'],
            'level': 'DEBUG',
            'propagate': False
        },
    }
}

# websocketfy proxy, run in the background with '&'
VNC_PROXY_PORT = 18787
dir_path = os.path.dirname(os.path.dirname(__file__))
websockify_path = os.path.join(dir_path, 'vnc', 'utils', 'websockify', 'websockify.py')
web_path = os.path.join(dir_path, 'vnc')
target_path = os.path.join(dir_path, 'vnc', 'vnc_tokens')
websockify_cmd = u'python %s --target-config=%s %s' % (websockify_path, target_path, VNC_PROXY_PORT) + '&'
# monitor task
# task_path = BASE_DIR + '/public/monitor_task.py'
cmd = 'ps -eo pid,args|grep websockify |grep -v "grep"'
info = commands.getoutput(cmd)
if len(info) > 0:
    infos = info.split('\n')
    if len(infos) > 0:
        pass
else:
    # init pid file
    pid_path = os.path.dirname(websockify_path) + '/monitor.pid'
    try:
        fs = open(pid_path, 'w')
        fs.write(str(0))
        fs.close()
    except:
        pass
    finally:
        os.system(websockify_cmd)
        pass

agent_id_flag = False
agent_id_path = BASE_DIR + '/uniagent.ini'
with open(agent_id_path) as agent_id_data:
    agent_id_lines = agent_id_data.readlines()
    for agent_line in agent_id_lines:
        if strip(agent_line).startswith("agent_id="):
            agent_id_flag = True
            break
if not agent_id_flag:
    with open(agent_id_path, 'w+') as agentSettings:
        agent_id = uuid.uuid1()
        agentSettings.writelines("agent_id={}".format(agent_id))

register_path = BASE_DIR + '/agent/register.py'
reg_cmd = 'ps -eo pid,args|grep ' + register_path + ' |grep -v "grep"'
reg_info = commands.getoutput(reg_cmd)
if len(reg_info) > 0:
    infos = reg_info.split('\n')
    if len(infos) > 0:
        pass
else:
    # init pid file
    reg_pid_path = BASE_DIR + '/agent/agent.pid'
    try:
        fs = open(reg_pid_path, 'w')
        fs.write(str(0))
        fs.close()
    except:
        pass
    finally:
        os.system('python ' + register_path + ' &')


# timed task
timed_task_path = BASE_DIR + '/taskmonitor/task.py'
cmd = 'ps -eo pid,args|grep ' + timed_task_path + ' |grep -v "grep"'
info = commands.getoutput(cmd)
if len(info) > 0:
    infos = info.split('\n')
    if len(infos) > 0:
        pass
else:
    # init pid file
    timed_pid_path = BASE_DIR + '/taskmonitor/task.pid'
    try:
        fs = open(timed_pid_path, 'w')
        fs.write(str(0))
        fs.close()
    except:
        pass
    finally:
        os.system('python ' + timed_task_path + ' &')
